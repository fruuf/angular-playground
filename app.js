/*
this entire file is generated by express-generator
its a command line tool that creates folders and files for a 
hello world in express. dont worry about express / server side
javascript too much, its a different thing. One of the key concepts
is middleware that gets pushed to the stack with app.use (general)
or app.get / app.post (specific http requests).
At this stage we use express to transform and bundle our scripts
and stylesheets for the application and to serve a single html file
that includes those scripts and gets published by angular.
*/

var express = require('express');
var path = require('path');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var lessMiddleware = require('less-middleware');
var browserifyMiddleware = require('browserify-middleware');

var routes = require('./routes/index');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');


app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use("/client", browserifyMiddleware(__dirname + '/client'));
app.use("/client", lessMiddleware(__dirname + '/client', {
  dest: __dirname + "/cache"
}));
app.use("/client", express.static(path.join(__dirname, 'cache')));

app.use(express.static(path.join(__dirname, 'public')));

app.use('/', routes);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});


module.exports = app;
